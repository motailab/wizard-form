{"version":3,"sources":["assets/img/robo.png","Modal/Modal.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormModal","chilren","closeModal","props","useState","isOpen","setIsOpen","Date","selectedDate","setSelectedDate","step","setStep","step1","step2","error","setError","lineWidth","setLineWidth","months","formData","setFormData","formRef","useRef","info","title","message","formatDate","date","format","1","2","3","tomorrow","setDate","getDate","today","toDateString","getMonth","handleDataChange","e","target","name","value","Modal","size","backdrop","keyboard","aria-labelledby","Header","className","src","robo","alt","style","height","Body","width","ref","display","htmlFor","id","onChange","disabled","class","rows","placeholder","type","checked","onClick","preventDefault","openPicker","defaultValue","utils","DateFnsUtils","hidden","fullWidth","margin","label","open","onDismiss","onAccept","showTodayButton","disablePast","href","updatePhone","Footer","Object","keys","length","current","reset","App","React","modalShow","setModalShow","Container","Row","Col","show","onHide","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ffa2e96b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robo.5189f593.png\";","import React, { useState, useRef} from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport robo from '../assets/img/robo.png';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\n\r\nexport default function FormModal({chilren, closeModal, ...props}) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [step, setStep] = useState(1);\r\n    const [error, setError] = useState({step1: false, step2: false});\r\n    const [lineWidth, setLineWidth] = useState(0);\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'November', 'December'];\r\n    const [formData, setFormData] = useState({});\r\n    const formRef = useRef();\r\n\r\n    const info = [\r\n        {\r\n            title: 'How can I help you, Emmanuel?',\r\n            message: 'Schedule a call with your monitor, solve your issues, get all the helps that you need.'\r\n        },\r\n        {\r\n            title: 'Schedule a conversation with Ms. Jane Wayne?',\r\n            message: ''\r\n        },\r\n        {\r\n            title: 'Congratulations!',\r\n            message: 'Your schedule has been successfully created. '\r\n        },\r\n        \r\n    ];\r\n\r\n    function openPicker(e) {\r\n        e.preventDefault();\r\n        setIsOpen(true);\r\n    }\r\n\r\n    function onChangeDateHandler(date) {\r\n        setSelectedDate(date);\r\n        formData['schedule-date'] = date;\r\n    }\r\n\r\n    function formatDate(date) {\r\n        const format = {1:'st', 2: 'nd', 3: 'rd'};\r\n        var tomorrow = new Date();\r\n        tomorrow.setDate(new Date().getDate()+1);\r\n        //checking is selected date is today or tomorrow\r\n        const today = date.toDateString() === (new Date()).toDateString() ? 'Today, ' : tomorrow.toDateString() === date.toDateString() ? 'Tomorrow, ' : '';\r\n        //returning user readable date\r\n        return `${today} ${months[date.getMonth()]} ${date.getDate()}${format[date.getDate()] ? format[date.getDate()] : 'th'}`;\r\n    }\r\n\r\n    function nextStep() {\r\n\r\n        if(step === 1) {\r\n            if(Object.keys(formData).length >= 3) {\r\n                setStep(step+1);\r\n                setError({...error, step1: false});\r\n                setLineWidth(50);\r\n            } else {\r\n                setError({...error, step1: true});\r\n            }\r\n        }\r\n\r\n        if(step === 2) {\r\n            if(!formData['schedule-call'] && formData['schedule-call'] === 'yes' && Object.keys(formData).length >= 4) {\r\n                setError({...error, step2: true});\r\n            } else {\r\n                setStep(step+1);\r\n                setError({...error, step2: false});\r\n                setLineWidth(100);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function handleModalColse() {\r\n        closeModal();\r\n    }\r\n\r\n    function handleDataChange(e) {\r\n        formData[e.target.name] = e.target.value;\r\n        setFormData({...formData});\r\n    }\r\n\r\n    function handleComplete() {\r\n        setFormData({});\r\n        closeModal();\r\n        setStep(1);\r\n        setLineWidth(0);\r\n    }\r\n\r\n    function updatePhone(e) {\r\n        e.preventDefault();\r\n        setStep(2);\r\n        setLineWidth(50);\r\n    }\r\n\r\n    function handleNewRequest() {\r\n        setStep(1);\r\n        setLineWidth(0);\r\n        setFormData({});\r\n        formRef.current.reset();\r\n    }\r\n\r\n    return (\r\n        <Modal \r\n        {...props}\r\n        size=\"md\"\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        >\r\n            <Modal.Header className=\"pt-4 px-4 pb-0 d-flex justify-content-between\">\r\n\r\n                <div className=\"content-left\">\r\n                    <button className=\"btn label-doctor btn-sm px-4\">I'm Dr. H</button>\r\n                    <h4 className=\"my-2\">{step <= 3 ? info[step-1].title : ''}</h4>\r\n                    <p>{step <= 3 ? info[step-1].message : ''}</p>\r\n                </div>\r\n\r\n                <div className=\"content-right\">\r\n                    <img src={robo} alt=\"robo\" className=\"img-fluid\" style={{height: '10rem'}}/>\r\n                </div>\r\n\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                   <div className=\"line\" style={{width: lineWidth > 0 ? `calc(${lineWidth+'% + 2em'})` : 0 }}></div>\r\n                   <form className=\"py-4 appointment-form\" ref={formRef}>\r\n\r\n                       {/* first step  */}\r\n                        <div className=\"step1\" style={{display: step === 1 ? 'block' : 'none'}}>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"help-needed\">Help Needed:</label>\r\n                                <select name=\"help-needed\" id=\"help-needed\" className=\"form-control custom-select\" onChange={e => handleDataChange(e)}>\r\n                                    <option value=\"I need to speak to a counselor\">I need to speak to a counselor</option>\r\n                                    <option value=\"My technology\">My technology</option>\r\n                                    <option value=\"I need help with STEMuli\">MI need help with STEMuli</option>\r\n                                    <option value=\"I need to ask my teacher for help on Assignment\">I need to ask my teacher for help on Assignment</option>\r\n                                    <option value=\"I need help with a college course\">I need help with a college course</option>\r\n                                    <option value=\"I need more time on an assignment\">I need more time on an assignment</option>\r\n                                </select>\r\n                                {!formData['help-needed'] && error.step1 === true && <div className='text-danger'>Plese select One of The option</div> }\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"help-assignment\">Select assignment:</label>\r\n                                <select name=\"help-assignment\" id=\"help-assignment\" className=\"form-control custom-select\" onChange={e => handleDataChange(e)} disabled={formData['help-needed'] ? false : true}>\r\n                                    <option value=\"101\">Course 101</option>\r\n                                    <option value=\"101\">Course 102</option>\r\n                                    <option value=\"101\">Course 103</option>\r\n                                </select>\r\n                                {!formData['help-assignment'] && error.step1 === true && <div className='text-danger'>Plese select One of The option</div> }\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"help-details\">Add Details:</label>\r\n                                <textarea class=\"form-control\" name=\"help-details\" id=\"help-details\" rows=\"7\" className=\"form-control\" placeholder=\"I want people to |\" onChange={e => handleDataChange(e)}></textarea>\r\n                                {!formData['help-details'] && error.step1 === true && <div className='text-danger'>Please Add Some Details</div> }\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        {/* second step2  */}\r\n                        <div className=\"step2\" style={{display: step === 2 ? 'block' : 'none'}}>\r\n                            {!formData['schedule-call'] && error.step2 === true && <div className='text-danger'>Please Choose Your Prefared Option from below</div> }\r\n                            <div class=\"custom-control custom-radio custom-control-inline\">\r\n                                <input type=\"radio\" id=\"schedule-call1\" name=\"schedule-call\" class=\"custom-control-input\" value=\"no\" onChange={e => handleDataChange(e)} checked={!formData['schedule-call'] || formData['schedule-call'] === 'no'}/>\r\n                                <label class=\"custom-control-label\" htmlFor=\"schedule-call1\">No, I don’t need to schedule a call</label>\r\n                            </div>\r\n\r\n                            <div class=\"custom-control custom-radio custom-control-inline\">\r\n                                <input type=\"radio\" id=\"schedule-call2\" name=\"schedule-call\" class=\"custom-control-input\" value=\"yes\" onChange={e => handleDataChange(e)} checked={formData['schedule-call'] === 'yes'}/>\r\n                                <label class=\"custom-control-label\" htmlFor=\"schedule-call2\">Yes, I want to schedule a call</label>\r\n                            </div>\r\n\r\n                            \r\n                            <div className=\"row pl-4 mt-4\">\r\n                                <div className=\"col-md-12\">\r\n                                    {formData['schedule-call'] && formData['schedule-call'] === 'yes' && !formData['call-type']  && error.step2 === true && <div className='text-danger'>Choose A Call Option</div> }\r\n                                </div>\r\n                                <div className=\"container\">\r\n                                    <div className=\"row\" style={{display: formData['schedule-call'] === 'yes' ? null : 'none'}}>\r\n                                        <div className=\"col-md-6 form-group\">\r\n                                            <div className=\"custom-button\">\r\n                                                <input type=\"radio\" name=\"call-type\" id=\"call-type1\" value=\"phone-call\" onChange={e => handleDataChange(e)}/>\r\n                                                <label>\r\n                                                    <i class=\"fas fa-phone-alt\"></i>\r\n                                                    <small>Call my cell phone</small>\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6 form-group\">\r\n                                            <div className=\"custom-button\">\r\n                                                <input type=\"radio\" name=\"call-type\" id=\"call-type2\" value=\"video-call\" onChange={e => handleDataChange(e)}/>\r\n                                                <label>\r\n                                                    <i class=\"fas fa-video\"></i>\r\n                                                    <small>Schedule a video call</small>\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-12\">\r\n                                            <label>When:</label>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6 form-group\">\r\n                                            {!formData['schedule-date']  && error.step2 === true && <div className='text-danger'>Choose Schedule Date</div> }\r\n                                            <select name=\"schedule-date\" id=\"schedule-date\" className=\"form-control custom-select\" onClick={e => openPicker(e)}>\r\n                                                <option defaultValue={formatDate(selectedDate)}>{formatDate(selectedDate)}</option>\r\n                                            </select>\r\n                                            <MuiPickersUtilsProvider utils={DateFnsUtils} hidden>\r\n                                                <KeyboardDatePicker\r\n                                                    fullWidth\r\n                                                    format=\"MM/dd/yyyy\"\r\n                                                    margin=\"normal\"\r\n                                                    id=\"date-picker-dialog\"\r\n                                                    label=\"Pick A Date\"\r\n                                                    value={selectedDate}\r\n                                                    open={isOpen}\r\n                                                    onChange={onChangeDateHandler}\r\n                                                    onDismiss={() => setIsOpen(false)}\r\n                                                    onAccept={(date) => setIsOpen(false)}\r\n                                                    showTodayButton={true}\r\n                                                    disablePast={true}\r\n                                                />\r\n                                            </MuiPickersUtilsProvider>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6 form-group\">\r\n                                            {!formData['schedule-time']  && error.step2 === true && <div className='text-danger'>Choose Schedule time</div> }\r\n                                            <select name=\"schedule-time\" id=\"schedule-time\" className=\"form-control custom-select\"  onChange={e => handleDataChange(e)}>\r\n                                                <option value=\"10AM-11:00AM\">10AM - 11:00AM</option>\r\n                                                <option value=\"11AM-12:00AM\">11AM - 12:00AM</option>\r\n                                            </select>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"col-md-12 form-group\" style={{display: formData['call-type'] === 'phone-call' && formData['schedule-call'] === 'yes' ? 'block' : 'none'}}>\r\n                                    {formData['call-type'] === 'phone-call'  && !formData['phone'] && error.step2 === true && <div className='text-danger'>please Insert Phone Number</div> }\r\n                                    <label htmlFor=\"phone\">Your Phone Number</label>\r\n                                    <input type=\"text\" placeholder=\"+1 234 909 1123\" className=\"form-control\" name=\"phone\" onChange={e => handleDataChange(e)}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* step 3  */}\r\n                        <div className=\"step3\" style={{display: step === 3 ? 'block' : 'none'}}>\r\n                            <h4>Help needed:</h4>\r\n                            <p>{formData['help-needed']} //  Course {formData['help-assignment']}</p>\r\n                            <div className=\"schedule-details\">\r\n                                <h4>Schedule Details</h4>\r\n                                <p>We have notified your monitor about your request, hang on tight</p>\r\n                                \r\n                                {formData['schedule-date'] &&\r\n                                    <div className=\"d-flex\">\r\n                                        <p className=\"icon\"><i class=\"fas fa-calendar-check\"></i></p>\r\n                                        <p className=\"text\">{formatDate(formData['schedule-date'])}</p>\r\n                                    </div>}\r\n\r\n                                {formData['schedule-time'] &&\r\n                                    <div className=\"d-flex\">\r\n                                    <p className=\"icon\"><i class=\"fas fa-clock\"></i></p>\r\n                                        <p className=\"text\">{formData['schedule-time']}</p>\r\n                                    </div>}\r\n\r\n\r\n                                <div className=\"d-flex\">\r\n                                    <p className=\"icon\"><i class=\"fas fa-user-alt\"></i></p>\r\n                                    <p className=\"text\">Test User</p>\r\n                                </div>\r\n\r\n                                {formData['phone'] && \r\n                                <div className=\"d-flex\">\r\n                                    <p className=\"icon\"><i class=\"fas fa-phone-alt\"></i></p>\r\n                                    <p className=\"text\">{formData['phone']} <a href=\"#\" onClick={e => updatePhone(e)} className=\"d-inline ml-4\">Update Phone</a></p>\r\n                                </div>}\r\n                            </div>\r\n                        </div>\r\n\r\n                   </form>\r\n                </Modal.Body>\r\n            <Modal.Footer className=\"d-flex justify-content-between\">\r\n              <button className=\"btn btn-white\" onClick={handleModalColse} style={{display: step >= 3 ? 'none' : ''}}>Cancel</button>\r\n              <button className=\"btn btn-purple\" onClick={nextStep} style={{display: step >= 3 ? 'none' : ''}}>Continue</button>\r\n\r\n              <button className=\"btn btn-white\" onClick={handleNewRequest} style={{display: step >= 3 ? 'block' : 'none'}}>+ New Request</button>\r\n              <button className=\"btn btn-purple\" onClick={handleComplete} style={{display: step >= 3 ? 'block' : 'none'}}>Complete</button>\r\n\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport {Container, Row, Col } from 'react-bootstrap';\nimport Modal from './Modal/Modal';\n\nfunction App() {\n  const [modalShow, setModalShow] = React.useState(false);\n\n  function handleShowModal() {\n    setModalShow(true);\n  }\n\n  function handleCloseModal() {\n    setModalShow(false);\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <button class=\"absbtn\" onClick={handleShowModal}><i class=\"fas fa-question-circle \"></i></button>\n          <Modal  \n            show={modalShow}\n            onHide={() => setModalShow(false)}\n            closeModal={handleCloseModal}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}